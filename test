----------------------------------------------------------
-- Written by Farley Farley
-- Adapted by DLW for the Boxer
-- farley <at> neonsurge __dot__ com
-- From: https://github.com/AndrewFarley/Taranis-XLite-Q7-Lua-Dashboard
-- Please feel free to submit issues, feedback, etc.
----------------------------------------------------------
 
 
------- GLOBALS -------
-- The model name when it can't detect a model name  from the handset
local modelName = "Unknown"
local lowVoltage = 6.2
local currentVoltage = 8.3
local highVoltage = 8.3
-- For our timer tracking
local timerLeft = 0
local maxTimerValue = 0
-- For armed drawing
local armed = 0
local flight_mode = 0 -- local variable for telemetry flight mode
-- For mode drawing
local mode = 0
-- Animation increment
local animationIncrement = 0
-- is off trying to go on...
local isArmed = 0
-- Our global to get our link_quality
local link_quality = 0
-- For debugging / development
local lastMessage = "None"
local lastNumberMessage = "0"
 
local function keepTwoDecimalPlaces(decimal)
  decimal = decimal * 100
  if decimal % 1 >= 0.5 then 
    decimal=math.ceil(decimal)
  else
    decimal=math.floor(decimal)
  end
  return  decimal * 0.01
end
 
------- HELPERS -------
-- Helper converts voltage to percentage of voltage for a sexy battery percent
local function convertVoltageToPercentage(voltage)
  local curVolPercent = math.ceil(((((highVoltage - voltage) / (highVoltage - lowVoltage)) - 1) * -1) * 100)
  if curVolPercent < 0 then
    curVolPercent = 0
  end
  if curVolPercent > 100 then
    curVolPercent = 100
  end
  return curVolPercent
end
 
-- A little animation / frame counter to help us with various animations
local function setAnimationIncrement()
  animationIncrement = math.fmod(math.ceil(math.fmod(getTime() / 100, 2) * 8), 4)
end
 
local function drawPropellor(start_x, start_y, invert)
  local animationIncrementLocal = animationIncrement
  if invert == true then
    animationIncrementLocal = (animationIncrementLocal - 3) * -1
    animationIncrementLocal = animationIncrementLocal + 3
    if animationIncrementLocal > 3 then
      animationIncrementLocal = animationIncrementLocal - 4
    end
  end
 
  -- Animated Quadcopter propellors
  if ((isArmed == 0 or isArmed == 2) and invert == false) or (isArmed == 1 and animationIncrementLocal == 0) then
    -- Top left Propellor
    lcd.drawLine(start_x + 1, start_y + 9, start_x + 9, start_y + 1, SOLID, FORCE)
    lcd.drawLine(start_x + 1, start_y + 10, start_x + 8, start_y + 1, SOLID, FORCE)
  elseif isArmed == 1 and animationIncrementLocal == 1 then
    -- Top left Propellor
    lcd.drawLine(start_x, start_y + 5, start_x + 9, start_y + 5, SOLID, FORCE)
    lcd.drawLine(start_x, start_y + 4, start_x + 9, start_y + 6, SOLID, FORCE)
  elseif ((isArmed == 0 or isArmed == 2) and invert == true) or (isArmed == 1 and animationIncrementLocal == 2) then
    -- Top left Propellor
    lcd.drawLine(start_x + 1, start_y + 1, start_x + 9, start_y + 9, SOLID, FORCE)
    lcd.drawLine(start_x + 1, start_y + 2, start_x + 10, start_y + 9, SOLID, FORCE)
  elseif isArmed == 1 and animationIncrementLocal == 3 then
    -- Top left Propellor
    lcd.drawLine(start_x + 5, start_y, start_x + 5, start_y + 10, SOLID, FORCE)
    lcd.drawLine(start_x + 6, start_y, start_x + 4, start_y + 10, SOLID, FORCE)
  end
end
 
-- A sexy helper to draw a 30x30 quadcopter (since X7 can not draw bitmap)
local function drawQuadcopter(start_x,start_y)
 
  -- Top left to bottom right
  lcd.drawLine(start_x + 4, start_y + 4, start_x + 26, start_y + 26, SOLID, FORCE)
  lcd.drawLine(start_x + 4, start_y + 5, start_x + 25, start_y + 26, SOLID, FORCE)
  lcd.drawLine(start_x + 5, start_y + 4, start_x + 26, start_y + 25, SOLID, FORCE)
 
  -- Bottom left to top right
  lcd.drawLine(start_x + 4, start_y + 26, start_x + 26, start_y + 4, SOLID, FORCE)
  lcd.drawLine(start_x + 4, start_y + 25, start_x + 25, start_y + 4, SOLID, FORCE)
  lcd.drawLine(start_x + 5, start_y + 26, start_x + 26, start_y + 5, SOLID, FORCE)
 
  -- Middle of Quad
  lcd.drawRectangle(start_x + 11, start_y + 11, 9, 9, SOLID)
  lcd.drawRectangle(start_x + 12, start_y + 12, 7, 7, SOLID)
  lcd.drawRectangle(start_x + 13, start_y + 13, 5, 5, SOLID)
 
  -- ARMED text
  if isArmed == 1 then
    lcd.drawText(56, 79, "ARMED", SMLSIZE + BLINK)
  else lcd.drawText(49, 79, "DISARMED", SMLSIZE)
  end
 
  -- Top-left propellor
  drawPropellor(start_x, start_y, false)
  -- Bottom-Right Propellor
  drawPropellor(start_x + 20, start_y + 20, false)
  -- Top-Right Propellor
  drawPropellor(start_x + 20, start_y, true)
  -- Bottom-left Propellor
  drawPropellor(start_x, start_y + 20, true)
 
end
 
-- Sexy voltage helper
local function drawTransmitterVoltage(start_x,start_y,voltage)
 
  local batteryWidth = 17
 
  -- Battery Outline
  lcd.drawRectangle(start_x, start_y, batteryWidth + 2, 6, SOLID)
  lcd.drawLine(start_x + batteryWidth + 2, start_y + 1, start_x + batteryWidth + 2, start_y + 4, SOLID, FORCE) -- Positive Nub
 
  -- Battery Percentage (after battery)
  local curVolPercent = convertVoltageToPercentage(voltage)
  if curVolPercent < 20 then
    lcd.drawText(start_x + batteryWidth + 5, start_y, curVolPercent.."%", SMLSIZE + BLINK)
  else
    if curVolPercent == 100 then
      lcd.drawText(start_x + batteryWidth + 5, start_y, "99%", SMLSIZE)
    else
      lcd.drawText(start_x + batteryWidth + 5, start_y, curVolPercent.."%", SMLSIZE)
    end
 
  end
 
  -- Filled in battery
  local pixels = math.ceil((curVolPercent / 100) * batteryWidth)
  if pixels == 1 then
    lcd.drawLine(start_x + pixels, start_y + 1, start_x + pixels, start_y + 4, SOLID, FORCE)
  end
  if pixels > 1 then
    lcd.drawRectangle(start_x + 1, start_y + 1, pixels, 4)
  end
  if pixels > 2 then
    lcd.drawRectangle(start_x + 2, start_y + 2, pixels - 1, 2)
    lcd.drawLine(start_x + pixels, start_y + 2, start_x + pixels, start_y + 3, SOLID, FORCE)
  end
end
 
local function drawFlightTimer(start_x, start_y)
  local timerWidth = 44
  local timerHeight = 20
  local myWidth = 0
  local percentageLeft = 0
 
  lcd.drawRectangle( start_x, start_y, timerWidth, 10 )
  lcd.drawText( start_x + 2, start_y + 2, "Fly Timer", SMLSIZE )
  lcd.drawRectangle( start_x, start_y + 10, timerWidth, timerHeight )
 
  if timerLeft < 0 then
    lcd.drawRectangle( start_x + 2, start_y + 20, 3, 2 )
    lcd.drawText( start_x + 2 + 3, start_y + 12, (timerLeft * -1).."s", DBLSIZE + BLINK )
  else
    lcd.drawTimer( start_x + 2, start_y + 12, timerLeft, DBLSIZE )
  end
 
  percentageLeft = (timerLeft / maxTimerValue)
  local offset = 0
  while offset < (timerWidth - 2) do
    if (percentageLeft * (timerWidth - 2)) > offset then
      -- print("Percent left: "..percentageLeft.." width: "..myWidth.." offset: "..offset.." timerHeight: "..timerHeight)
      lcd.drawLine( start_x + 1 + offset, start_y + 11, start_x + 1 + offset, start_y + 9 + timerHeight - 1, SOLID, 0)
    end
    offset = offset + 1
  end
 
end
 
local function drawTime()
  -- Draw date time
  local datenow = getDateTime()
  local min = datenow.min .. ""
  if datenow.min < 10 then
    min = "0" .. min
  end
  local hour = datenow.hour .. ""
  if datenow.hour < 10 then
    hour = "0" .. hour
  end
  if math.ceil(math.fmod(getTime() / 100, 2)) == 1 then
    hour = hour .. ":"
  end
  lcd.drawText(107,2,hour, SMLSIZE)
  lcd.drawText(119,2,min, SMLSIZE)
end
 
local function drawlink_quality(start_x, start_y)
 
  lcd.drawRectangle( start_x, start_y, 44, 10 )
  lcd.drawText( start_x + 2, start_y + 2, "LQ", SMLSIZE)
  if link_quality < 50 then
    lcd.drawText( start_x + 26, start_y + 2, link_quality, SMLSIZE + BLINK)
  else
    lcd.drawText( start_x + 26, start_y + 2, link_quality, SMLSIZE)
  end
 
end
 
local function drawVoltageText(start_x, start_y)
  -- First, try to get voltage from VFAS...
  local voltage = getValue('RxBt')
  -- local voltage = getValue('Cels')   -- For miniwhoop seems more accurate
  -- TODO: if that failed, get voltage from somewhere else from my bigger quads?  Or rebind the voltage to VFAS?
 
  if tonumber(voltage) >= 10 then
    lcd.drawText(start_x,start_y,string.format("%.2f", voltage),MIDSIZE)
  else
    lcd.drawText(start_x + 7,start_y,string.format("%.2f", voltage),MIDSIZE)
  end
  lcd.drawText(start_x + 31, start_y + 4, 'v', MIDSIZE)
end
 
local function drawCellVoltageText(start_x, start_y)
  -- First, try to get voltage from VFAS...
  local totalvoltage = getValue('RxBt')
  lcd.drawText(start_x,start_y,string.format("%.2f", totalvoltage/6),XLSIZE) ---6S Battery
  lcd.drawText(start_x +17, start_y+1, 'v', SMLSIZE)
end
 
local function drawVoltageImage(start_x, start_y)
 
  -- Define the battery width (so we can adjust it later)
  local batteryWidth = 12
 
  -- Draw our battery outline
  lcd.drawLine(start_x + 2, start_y + 1, start_x + batteryWidth - 2, start_y + 1, SOLID, 0)
  lcd.drawLine(start_x, start_y + 2, start_x + batteryWidth - 1, start_y + 2, SOLID, 0)
  lcd.drawLine(start_x, start_y + 2, start_x, start_y + 50, SOLID, 0)
  lcd.drawLine(start_x, start_y + 50, start_x + batteryWidth - 1, start_y + 50, SOLID, 0)
  lcd.drawLine(start_x + batteryWidth, start_y + 3, start_x + batteryWidth, start_y + 49, SOLID, 0)
 
  -- top one eighth line
  lcd.drawLine(start_x + batteryWidth - math.ceil(batteryWidth / 4), start_y + 8, start_x + batteryWidth - 1, start_y + 8, SOLID, 0)
  -- top quarter line
  lcd.drawLine(start_x + batteryWidth - math.ceil(batteryWidth / 2), start_y + 14, start_x + batteryWidth - 1, start_y + 14, SOLID, 0)
  -- third eighth line
  lcd.drawLine(start_x + batteryWidth - math.ceil(batteryWidth / 4), start_y + 20, start_x + batteryWidth - 1, start_y + 20, SOLID, 0)
  -- Middle line
  lcd.drawLine(start_x + 1, start_y + 26, start_x + batteryWidth - 1, start_y + 26, SOLID, 0)
  -- five eighth line
  lcd.drawLine(start_x + batteryWidth - math.ceil(batteryWidth / 4), start_y + 32, start_x + batteryWidth - 1, start_y + 32, SOLID, 0)
  -- bottom quarter line
  lcd.drawLine(start_x + batteryWidth - math.ceil(batteryWidth / 2), start_y + 38, start_x + batteryWidth - 1, start_y + 38, SOLID, 0)
  -- seven eighth line
  lcd.drawLine(start_x + batteryWidth - math.ceil(batteryWidth / 4), start_y + 44, start_x + batteryWidth - 1, start_y + 44, SOLID, 0)
 
  -- Voltage top
  --lcd.drawText(start_x + batteryWidth + 4, start_y + 0, "4.2v", SMLSIZE)
  -- Voltage middle
  --lcd.drawText(start_x + batteryWidth + 4, start_y + 24, "3.6v", SMLSIZE)
  -- Voltage bottom
  --lcd.drawText(start_x + batteryWidth + 4, start_y + 47, "3.0v", SMLSIZE)
 
  -- Now draw how full our voltage is...
  local voltage = getValue('RxBt') --flight total battery voltage
  voltageLow = 3.0
  voltageHigh = 4.20
  voltageIncrement = ((voltageHigh - voltageLow) / 47)
 
  local offset = 0  -- Start from the bottom up
  while offset < 47 do
    if ((offset * voltageIncrement) + voltageLow) < (tonumber(voltage)/6) then  -- for 6s battery
      lcd.drawLine( start_x + 1, start_y + 49 - offset, start_x + batteryWidth - 1, start_y + 49 - offset, SOLID, 0)
    end
    offset = offset + 1
  end
end
 
local function drawQuadLocator(start_x, start_y, rssi, tsnr)
  readable_rssi = 0
  if(rssi > 0) then
    readable_rssi = 120 - rssi
  end
  -- lcd.drawPixMap(start_x, start_y, "/test.bmp")
  lcd.drawText( start_x + 2, start_y + 2, "Locator", SMLSIZE )
  lcd.drawGauge( start_x, start_y + 10, 45, 15, tsnr, 100 )
  lcd.drawGauge( start_x, start_y + 28, 45, 15, readable_rssi, 100)
  --lcd.drawText(start_x, start_y + 25, readable_rssi, SMLSIZE)
end
 
local function gatherInput(event)
 
  -- Get our link_quality
  link_quality = getValue("TQly")
  -- Get the Output power of the transmitter
  output_power = getValue("TPWR")
  -- Get the downlink stn ratio to be able to find the quad
  tsnr = getValue("TSNR")
  -- Also get RSSI to be more accurate
  rssi = getValue("RQly")
  -- Get GPS values
  coords = getValue("GPS")
  -- Get alt values
  alt = getValue("Alt")
  -- Get GPS Sats
  Sats = getValue("Sats")
  -- Get VSpd
  VSpd = math.abs(keepTwoDecimalPlaces(getValue("VSpd")))
  -- Get GPS speed
  --GSpd = math.abs(keepTwoDecimalPlaces(getValue("GSpd")))
 
  -- Get the seconds left in our timer
  timerLeft = getValue('timer1')
  -- And set our max timer if it's bigger than our current max timer
  if timerLeft > maxTimerValue then
    maxTimerValue = timerLeft
  end
 
  -- Get our current transmitter voltage
  currentVoltage = getValue('tx-voltage')
 
  -- Armed/disarm 
  armed = getValue("sa")
 
  -- Our "mode" switch -- uses actual telemetry
 
  flight_mode = getValue("sb")
 
  -- Do some event handling to figure out what button(s) were pressed  :)
  if event > 0 then
    lastNumberMessage = event
  end
 
  if event == 131 then
    lastMessage = "Page Button HELD"
    killEvents(131)
  end
  if event == 99 then
    lastMessage = "Page Button Pressed"
    killEvents(99)
  end
  if event == 97 then
    lastMessage = "Exit Button Pressed"
    killEvents(97)
  end
 
  if event == 96 then
    lastMessage = "Menu Button Pressed"
    killEvents(96)
  end
 
  if event == EVT_ROT_RIGHT then
    lastMessage = "Navigate Right Pressed"
    killEvents(EVT_ROT_RIGHT)
  end
  if event == EVT_ROT_LEFT then
    lastMessage = "Navigate Left Pressed"
    killEvents(EVT_ROT_LEFT)
  end
  if event == 98 then
    lastMessage = "Navigate Button Pressed"
    killEvents(98)
  end
 
end
--  draw power
local function drawPower(start_x, start_y, output_power)
  -- lcd.drawPixMap(start_x, start_y, "/test.bmp")
  lcd.drawRectangle( start_x, start_y, 44, 10 )
  lcd.drawText(start_x + 2, start_y + 2, "Pow", SMLSIZE )
  lcd.drawText(start_x + 26, start_y + 2, output_power, SMLSIZE)
end
 
-- draw rssi
local function drawRSSI(start_x, start_y,rssi)
  lcd.drawRectangle( start_x, start_y, 44, 10 )
  lcd.drawText( start_x + 2, start_y + 2, "RSSI", SMLSIZE)
  lcd.drawText( start_x + 26, start_y + 2, rssi, SMLSIZE)
end
 
-- draw alt
local function drawAlt(start_x, start_y,alt)
  lcd.drawRectangle( start_x, start_y, 44, 10 )
  lcd.drawText( start_x + 2, start_y + 2, "Alt", SMLSIZE)
  lcd.drawText( start_x + 26, start_y + 2, alt, SMLSIZE)
end
 
-- draw gps
 
lastGps_lon = "N/A"
lastGps_lat = "N/A"
local function drawGPS(start_x, start_y,gps)
   
  lcd.drawText( start_x, start_y + 2, "Ln:", SMLSIZE)
  lcd.drawText( start_x + 65, start_y + 2, "La:", SMLSIZE)
  if type(gps) == "table" then
    if gps["lat"] == 0 and gps["lon"] == 0 then
      lcd.drawText( start_x + 14, start_y + 2, lastGps_lon, SMLSIZE)
      lcd.drawText( start_x + 79, start_y + 2, lastGps_lat, SMLSIZE)
    else 
      lastGps_lon = gps["lon"]
      lastGps_lat = gps["lat"]
      lcd.drawText( start_x + 14, start_y + 2, lastGps_lon, SMLSIZE)
      lcd.drawText( start_x + 79, start_y + 2, lastGps_lat, SMLSIZE)
    end
  else
    lcd.drawText( start_x + 14, start_y + 2, lastGps_lon, SMLSIZE)
    lcd.drawText( start_x + 79, start_y + 2, lastGps_lat, SMLSIZE)
  end
 
end
 
-- draw gps sats
 
local function drawGPSStas(start_x, start_y,sats)
  lcd.drawRectangle( start_x, start_y, 44, 10 )
  lcd.drawText( start_x + 2, start_y + 2, "Sat", SMLSIZE)
  if sats < 5 then
    lcd.drawText( start_x + 26, start_y + 2, sats, SMLSIZE + BLINK)
  else 
    lcd.drawText( start_x + 26, start_y + 2, sats, SMLSIZE)
  end
end
 
-- draw VSpd 
 
local function drawVSpd(start_x, start_y,vspd)
  lcd.drawRectangle( start_x, start_y, 44, 10 )
  lcd.drawText( start_x + 2, start_y + 2, "Spd", SMLSIZE)
  lcd.drawText( start_x + 26, start_y + 2, vspd, SMLSIZE)
end
 
-- draw Bats text
local function drawBATsText(start_x,start_y)
  lcd.drawText(start_x, start_y,"Cell", SMLSIZE)
end
 
 
local function getModeText() -- modified to use actual flight mode from CrossFire telemetry and make modes more legible
  local modeText = "Unknown"
  if flight_mode < -512 then
    modeText = "MANUAL"
  elseif flight_mode> -100 and flight_mode < 100 then
    modeText = "ANGLE"
  elseif flight_mode > 512 then
    modeText = "HORIZON"
  else
    modeText = "----"
  end
  return modeText
end
 
local function run(event)
 
  -- Now begin drawing...
  lcd.clear()
 
  -- Gather input from the user
  gatherInput(event)
 
  -- Set our animation "frame"
  setAnimationIncrement()
 
 -- Check if we just armed... modified to use CrossFire telemetry modes to determine armed state
  if armed > 512 then
    isArmed = 1
  elseif armed < 512 and isArmed == 1 then
    isArmed = 0
  else
    isArmed = 0
  end
 
  -- Draw a horizontal line seperating the header
  lcd.drawLine(0, 11, 128, 11, SOLID, FORCE)
 
  -- Draw our model name centered at the top of the screen
  lcd.drawText( 64 - math.ceil((#modelName * 5) / 2),2, modelName, SMLSIZE)
 
  -- Draw our mode centered at the top of the screen just under that... modified to center a little better
  modeText = getModeText()
  lcd.drawText(68 - math.ceil((#modeText * 6) / 2),58, modeText, SMLSIZE)
 
  -- Draw our sexy quadcopter animated (if armed) from scratch
  drawQuadcopter(52, 26)
 
  -- Draw our sexy voltage
  drawTransmitterVoltage(0,2, currentVoltage)
 
  -- Draw our flight timer
  --drawQuadLocator(2, 50, rssi, tsnr)
 
  --draw rssi
  --drawRSSI(2,39,rssi)
 
  -- Draw power
  drawPower(0, 54, output_power)
   
  --Draw GPS, bad
  drawGPS(0,13,coords)
 
  --Draw GPS Stas
  drawGPSStas(0,34,Sats)
 
  --Draw SPEED
 -- drawVSpd(2,69,VSpd)
 
  --  Draw alt
  drawAlt(0,44,alt)
 
 
  -- Draw link_quality
  drawlink_quality(0, 24)
 
  -- Draw Time in Top Right
  drawTime()
 
  --draw cell voltage text
  drawBATsText(107,33)
  drawCellVoltageText(107,44)
 
 
  -- Draw voltage battery graphic
  drawVoltageImage(90, 24)
 
  return 0
end
 
 
local function init_func()
  -- Called once when model is loaded, only need to get model name once...
  local modeldata = model.getInfo()
  if modeldata then
    modelName = modeldata['name']
  end
end
 
 
return { run=run, init=init_func  }
